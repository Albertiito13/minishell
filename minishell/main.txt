
/* int	main(int argc, char **argv, char **envp)
{
	char	*line;
	char	**args;
	char	**my_env;

	(void)argc;
	(void)argv;
	my_env = dup_env(envp);

	setup_prompt_signals();
	while (1)
	{
		line = readline("minishell$ ");
		if (!line)
		{
			printf("exit\n");
			break ;
		}
		if (*line)
			add_history(line);
		char *expanded = expand_var(line, my_env);
		args = parse_line(expanded);
		free(expanded);
		if (args && args[0])
		{
			if (has_simple_pipe(args))
			{
				char **segments = ft_split(line, '|');
				execute_pipeline(segments, my_env);
				free_split(segments);
			}
			else if (ft_strncmp(args[0], "echo", 5) == 0)
				builtin_echo(&args[1]);
			else if (ft_strncmp(args[0], "pwd", 4) == 0)
				builtin_pwd();
			else if (ft_strncmp(args[0], "env", 4) == 0)
				builtin_env(my_env);
			else if (ft_strncmp(args[0], "unset", 6) == 0)
				builtin_unset(&args[1], &my_env);
			else if (ft_strncmp(args[0], "export", 7) == 0)
				builtin_export(&args[1], &my_env);
			else if (ft_strncmp(args[0], "cd", 3) == 0)
				builtin_cd(&args[1], my_env);
			else if (ft_strncmp(args[0], "exit", 5) == 0)
				builtin_exit(&args[1]);
			else
				execute_external(args, my_env);
		}
		free_split(args);
		free(line);
	}
	free_split(my_env);
	return (0);
} */